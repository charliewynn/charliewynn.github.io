{"version":3,"sources":["Feature.js","App.js","serviceWorker.js","index.js"],"names":["Feature","ndx","backgrounds","index","length","background","color","css","this","getCSS","props","cssNdx","classes","details","forceBig","style","className","href","link","name","Component","App","Features","map","f","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAkCeA,G,qLA9BNC,GACL,IAAMC,EAAc,CAClB,oBACA,kBACA,qBAGIC,EAAQF,EAAMC,EAAYE,OAChC,MAAO,CAAEC,WAAYH,EAAYC,GAAQG,MAF1B,CAAC,aAAc,QAAS,SAEgBH,M,+BAGvD,IAAMI,EAAMC,KAAKC,OAAOD,KAAKE,MAAMC,QAC/BC,EAAU,UAOd,OALEJ,KAAKE,MAAMG,UACVL,KAAKE,MAAMG,QAAQT,OAAS,IAAMI,KAAKE,MAAMI,YAE9CF,GAAW,YAGX,uBAAGG,MAAOR,EAAKS,UAAWJ,EAASK,KAAMT,KAAKE,MAAMQ,MAClD,yBAAKF,UAAU,iBAAiBR,KAAKE,MAAMS,MAC1CX,KAAKE,MAAMG,SACV,yBAAKG,UAAU,mBAAmBR,KAAKE,MAAMG,c,GAxBjCO,cC2EPC,G,iNAzEbC,SAAW,CACT,CACEH,KAAM,8BACND,KAAM,uBACNL,QAAS,+CAEX,CACEM,KAAM,8BACND,KAAM,uBACNL,QAAS,iDACTC,UAAU,GAEZ,CACEK,KAAM,SACND,KAAM,WACNL,QAAS,uBAEX,CACEM,KAAM,UACND,KAAM,WACNL,QAAS,qCAEX,CACEM,KAAM,mBACND,KAAM,gBACNL,QAAS,4CAEX,CACEM,KAAM,oBACND,KAAM,sBACNL,QACE,gGAEJ,CACEM,KAAM,eACND,KAAM,YACNL,QAAS,mCAEX,CACEM,KAAM,8BACND,KAAM,mBACNL,QACE,qHAEJ,CACEM,KAAM,0BACND,KAAM,kBACNL,QACE,sEAEJ,CACEM,KAAM,iBACND,KAAM,kBACNL,QAAS,+C,wEAIX,OACE,yBAAKG,UAAU,OACb,gDACA,iCACE,yBAAKA,UAAU,YACZR,KAAKc,SAASC,KAAI,SAACC,EAAGC,GAAJ,OACjB,kBAAC,EAAD,eAASF,IAAKC,EAAEL,KAAMR,OAAQc,GAAOD,SAI3C,sC,GApEUJ,cCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.88a93075.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/feature.css\";\r\n\r\nclass Feature extends Component {\r\n  getCSS(ndx) {\r\n    const backgrounds = [\r\n      \"rgb(157, 91, 196)\",\r\n      \"rgb(91,196,157)\",\r\n      \"rgb(196, 91, 193)\"\r\n    ];\r\n    const colors = [\"whitesmoke\", \"white\", \"white\"];\r\n    const index = ndx % backgrounds.length;\r\n    return { background: backgrounds[index], color: colors[index] };\r\n  }\r\n  render() {\r\n    const css = this.getCSS(this.props.cssNdx);\r\n    let classes = \"feature\";\r\n    if (\r\n      this.props.details &&\r\n      (this.props.details.length > 50 || this.props.forceBig)\r\n    ) {\r\n      classes += \" col--2x\";\r\n    }\r\n    return (\r\n      <a style={css} className={classes} href={this.props.link}>\r\n        <div className=\"feature-title\">{this.props.name}</div>\r\n        {this.props.details && (\r\n          <div className=\"feature-details\">{this.props.details}</div>\r\n        )}\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feature;\r\n","import React, { Component } from \"react\";\r\nimport Feature from \"./Feature\";\r\nimport \"./css/App.css\";\r\n\r\nclass App extends Component {\r\n  Features = [\r\n    {\r\n      name: \"Miller Family Football 2018\",\r\n      link: \"./mema-football-2018\",\r\n      details: \"2018 version of Miller family football pool\"\r\n    },\r\n    {\r\n      name: \"Miller Family Football 2019\",\r\n      link: \"./mema-football-2019\",\r\n      details: \"Current Miller Family Football for OU football\",\r\n      forceBig: true\r\n    },\r\n    {\r\n      name: \"Hanabi\",\r\n      link: \"./hanabi\",\r\n      details: \"Play Hanabi locally\"\r\n    },\r\n    {\r\n      name: \"Rubik's\",\r\n      link: \"./rubiks\",\r\n      details: \"References for rubik cube puzzles\"\r\n    },\r\n    {\r\n      name: \"Ball Bounce Demo\",\r\n      link: \"./ball-bounce\",\r\n      details: \"physics demo for ball bouncing in canvas\"\r\n    },\r\n    {\r\n      name: \"Pokemon Wish List\",\r\n      link: \"./pokemon-wish-list\",\r\n      details:\r\n        \"Lookup and store pokemon you want to catch/trade. Small demo using AWS services for backend.\"\r\n    },\r\n    {\r\n      name: \"Gravity Game\",\r\n      link: \"./gravity\",\r\n      details: \"Physics game using html5 canvas\"\r\n    },\r\n    {\r\n      name: \"Text Adventure (incomplete)\",\r\n      link: \"./text-adventure\",\r\n      details:\r\n        \"Text based version Ocarina of Time. Far from complete. Experimenting with making the engine for text-based games.\"\r\n    },\r\n    {\r\n      name: \"Hex Puzzle (incomplete)\",\r\n      link: \"./puzzle-hex-js\",\r\n      details:\r\n        \"Canvas prototype for hexagonal version of puzzle-quest style game.\"\r\n    },\r\n    {\r\n      name: \"Hamster Flight\",\r\n      link: \"./hamsterflight\",\r\n      details: \"Collect powerups and shoot cats/hairballs.\"\r\n    }\r\n  ];\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>Charlie Wynn</header>\r\n        <section>\r\n          <div className=\"features\">\r\n            {this.Features.map((f, i) => (\r\n              <Feature map={f.name} cssNdx={i} {...f} />\r\n            ))}\r\n          </div>\r\n        </section>\r\n        <footer></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}