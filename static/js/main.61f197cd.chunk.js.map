{"version":3,"sources":["Feature.js","App.js","serviceWorker.js","index.js"],"names":["Feature","react_default","a","createElement","className","style","this","props","css","href","link","name","Component","App","ndx","backgrounds","index","length","background","color","colorNdx","src_Feature","getCSS","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAaeA,0LARX,OACEC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUC,MAAOC,KAAKC,MAAMC,IAAKC,KAAMH,KAAKC,MAAMG,MAC7DT,EAAAC,EAAAC,cAAA,WAAMG,KAAKC,MAAMI,cAJHC,cCqCPC,wLAnCNC,GACL,IAAMC,EAAc,CAClB,oBACA,kBACA,qBAGIC,EAAQF,EAAMC,EAAYE,OAChC,MAAO,CAAEC,WAAYH,EAAYC,GAAQG,MAF1B,CAAC,QAAS,QAAS,SAEqBH,qCAGvD,IAAII,EAAW,EACf,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACkB,EAAD,CACEX,KAAK,kBACLC,KAAK,yBACLH,IAAKF,KAAKgB,OAAOF,OAEnBnB,EAAAC,EAAAC,cAACkB,EAAD,CACEV,KAAK,SACLD,KAAK,WACLF,IAAKF,KAAKgB,OAAOF,SAIvBnB,EAAAC,EAAAC,cAAA,gCA9BUS,cCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61f197cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/feature.css\";\r\n\r\nclass Feature extends Component {\r\n  render() {\r\n    return (\r\n      <a className=\"feature\" style={this.props.css} href={this.props.link}>\r\n        <div>{this.props.name}</div>\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feature;\r\n","import React, { Component } from \"react\";\nimport Feature from \"./Feature\";\nimport \"./css/App.css\";\n\nclass App extends Component {\n  getCSS(ndx) {\n    const backgrounds = [\n      \"rgb(157, 91, 196)\",\n      \"rgb(91,196,157)\",\n      \"rgb(196, 91, 193)\"\n    ];\n    const colors = [\"white\", \"white\", \"white\"];\n    const index = ndx % backgrounds.length;\n    return { background: backgrounds[index], color: colors[index] };\n  }\n  render() {\n    let colorNdx = 0;\n    return (\n      <div className=\"App\">\n        <header>Charlie Wynn</header>\n        <section>\n          <div className=\"features\">\n            <Feature\n              link=\"./mema-football\"\n              name=\"Miller Family Football\"\n              css={this.getCSS(colorNdx++)}\n            />\n            <Feature\n              name=\"Hanabi\"\n              link=\"./hanabi\"\n              css={this.getCSS(colorNdx++)}\n            />\n          </div>\n        </section>\n        <footer>footer</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}